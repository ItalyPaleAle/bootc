name: "Build Containers"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Docker registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME_BASE: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      # Necessary for writing attestations
      id-token: write
      attestations: write

    strategy:
      fail-fast: false
      matrix:
        baseImage:
          - centos-stream
          - alma-linux
          - alma-linux-rpi
        version: ['9', '10']
        exclude:
          - baseImage: 'alma-linux-rpi'
            version: '9'

    steps:
      # From: https://github.com/bootc-dev/bootc/blob/3c86c7fbf3a065434769c6de0fe507ef5e8c4262/.github/workflows/ci.yml#L49-L54
      - name: Get a newer podman (from debian testing)
        run: |
          set -eux
          echo 'deb [trusted=yes] https://ftp.debian.org/debian/ testing main' | sudo tee /etc/apt/sources.list.d/testing.list
          sudo apt update
          sudo apt install -y crun/testing podman/testing skopeo/testing

      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'tools/go.mod'
          cache-dependency-path: 'tools/go.sum'

      # Ensure that IMAGE_NAME_BASE is all lowercase
      - name: Lowercase IMAGE_NAME_BASE
        run: |
          echo "IMAGE_NAME_BASE=${IMAGE_NAME_BASE,,}" >>${GITHUB_ENV}

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          cosign-release: 'v2.5.3'

      # Add support for building for other platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: "linux/amd64,linux/arm64"

      # Login against a container registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Setup environment
      - name: Setup environment
        run: |
          # Create required folders
          mkdir -p .bin .out

      # Compile the tools app
      - name: Compile tools app
        run: |
          go build \
            -v \
            -o ../.bin/tools
        working-directory: ./tools

      # Build and push container image for base
      # For linux/amd64 and linux/arm64 (or arm64 only for RPi)
      - name: "Build and push container image: base"
        id: build-and-push-base
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            base \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch ${{ matrix.baseImage == 'alma-linux-rpi' && 'arm64' || 'amd64,arm64' }} \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/base.json
          echo "ImageName=$(jq -r '.imageName' .out/base.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/base.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for tailscale
      # For linux/amd64 and linux/arm64 (or arm64 only for RPi)
      - name: "Build and push container image: tailscale"
        id: build-and-push-tailscale
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            tailscale \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch ${{ matrix.baseImage == 'alma-linux-rpi' && 'arm64' || 'amd64,arm64' }} \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/tailscale.json
          echo "ImageName=$(jq -r '.imageName' .out/tailscale.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/tailscale.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for monitoring
      # For linux/amd64 and linux/arm64 (or arm64 only for RPi)
      - name: "Build and push container image: k3s"
        id: build-and-push-k3s
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            k3s \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch ${{ matrix.baseImage == 'alma-linux-rpi' && 'arm64' || 'amd64,arm64' }} \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/k3s.json
          echo "ImageName=$(jq -r '.imageName' .out/k3s.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/k3s.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for monitoring
      # For linux/amd64 and linux/arm64 (or arm64 only for RPi)
      - name: "Build and push container image: monitoring"
        id: build-and-push-monitoring
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            monitoring \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch ${{ matrix.baseImage == 'alma-linux-rpi' && 'arm64' || 'amd64,arm64' }} \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/monitoring.json
          echo "ImageName=$(jq -r '.imageName' .out/monitoring.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/monitoring.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for zfs
      # For linux/amd64
      - name: "Build and push container image: zfs"
        id: build-and-push-zfs
        if: matrix.baseImage != 'alma-linux-rpi'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            zfs \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/zfs.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for monitoring-zfs
      # For linux/amd64
      - name: "Build and push container image: monitoring-zfs"
        id: build-and-push-monitoring-zfs
        if: matrix.baseImage != 'alma-linux-rpi'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            monitoring-zfs \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/monitoring-zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/monitoring-zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/monitoring-zfs.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server
      # For linux/amd64 and linux/arm64 (or arm64 only for RPi) (Alma Linux only)
      - name: "Build and push container image: server"
        id: build-and-push-server
        if: matrix.baseImage == 'alma-linux' || matrix.baseImage == 'alma-linux-rpi'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch ${{ matrix.baseImage == 'alma-linux-rpi' && 'arm64' || 'amd64,arm64' }} \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server.json
          echo "ImageName=$(jq -r '.imageName' .out/server.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-zfs
      # For linux/amd64 (Alma Linux only)
      - name: "Build and push container image: server-zfs"
        id: build-and-push-server-zfs
        if: matrix.baseImage == 'alma-linux'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-zfs \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/server-zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-zfs.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-worker
      # For linux/amd64 and linux/arm64 (Alma Linux only)
      - name: "Build and push container image: server-worker"
        id: build-and-push-server-worker
        if: matrix.baseImage == 'alma-linux'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-worker \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64,arm64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-worker.json
          echo "ImageName=$(jq -r '.imageName' .out/server-worker.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-worker.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-k3s
      # For linux/amd64 and linux/arm64 (Alma Linux only)
      - name: "Build and push container image: server-k3s"
        id: build-and-push-server-k3s
        if: matrix.baseImage == 'alma-linux'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-k3s \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64,arm64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-k3s.json
          echo "ImageName=$(jq -r '.imageName' .out/server-k3s.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-k3s.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-worker-zfs
      # For linux/amd64 (Alma Linux 10 only)
      - name: "Build and push container image: server-worker-zfs"
        id: build-and-push-server-worker-zfs
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-worker-zfs \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-worker-zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/server-worker-zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-worker-zfs.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-k3s-zfs
      # For linux/amd64 (Alma Linux 10 only)
      - name: "Build and push container image: server-k3s-zfs"
        id: build-and-push-server-k3s-zfs
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-k3s-zfs \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-k3s-zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/server-k3s-zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-k3s-zfs.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-mochi
      # For linux/amd64 (Alma Linux 10 only)
      - name: "Build and push container image: server-mochi"
        id: build-and-push-server-mochi
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-mochi \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-mochi.json
          echo "ImageName=$(jq -r '.imageName' .out/server-mochi.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-mochi.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-atlas
      # For linux/amd64 (Alma Linux 10 only)
      - name: "Build and push container image: server-atlas"
        id: build-and-push-server-atlas
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-atlas \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-atlas.json
          echo "ImageName=$(jq -r '.imageName' .out/server-atlas.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-atlas.json)" >> "$GITHUB_OUTPUT"

      # Build and push container image for server-boba
      # For linux/amd64 (Alma Linux 10 only)
      - name: "Build and push container image: server-boba"
        id: build-and-push-server-boba
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        run: |
          set -euo pipefail
          .bin/tools \
            build \
            server-boba \
            --default-base-image "${{ matrix.baseImage }}-${{ matrix.version }}" \
            --work-dir ./el${{ matrix.version }} \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.baseImage }}-${{ matrix.version }}/" \
            --platform podman \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/server-boba.json
          echo "ImageName=$(jq -r '.imageName' .out/server-boba.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/server-boba.json)" >> "$GITHUB_OUTPUT"

      - name: 'Container image attestation: tailscale'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-tailscale.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-tailscale.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: base'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-base.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-base.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: k3s'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-k3s.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-k3s.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: monitoring'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-monitoring.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-monitoring.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: zfs'
        uses: actions/attest-build-provenance@v1
        if: matrix.baseImage != 'alma-linux-rpi'
        with:
          subject-name: ${{ steps.build-and-push-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-zfs.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: monitoring-zfs'
        uses: actions/attest-build-provenance@v1
        if: matrix.baseImage != 'alma-linux-rpi'
        with:
          subject-name: ${{ steps.build-and-push-monitoring-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-monitoring-zfs.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server'
        if: matrix.baseImage == 'alma-linux' || matrix.baseImage == 'alma-linux-rpi'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-zfs'
        if: matrix.baseImage == 'alma-linux'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-zfs.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-worker'
        if: matrix.baseImage == 'alma-linux'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-worker.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-worker.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-k3s'
        if: matrix.baseImage == 'alma-linux'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-k3s.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-k3s.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-worker-zfs'
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-worker-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-worker-zfs.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-k3s-zfs'
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-k3s-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-k3s-zfs.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-mochi'
        if: matrix.baseImage == 'alma-linux' && matrix.version == '10'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-mochi.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-mochi.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-atlas'
        if: matrix.baseImage == 'alma-linux'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-atlas.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-atlas.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: server-boba'
        if: matrix.baseImage == 'alma-linux'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-server-boba.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-server-boba.outputs.Digest }}
          push-to-registry: true
