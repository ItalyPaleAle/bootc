name: "Build Containers"

on:
  schedule:
    # https://crontab.guru/#42_16_*_*_1,5
    - cron: '42 16 * * 1,5'
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Docker registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME_BASE: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Necessary for writing attestations
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'tools/go.mod'

      # Ensure that IMAGE_NAME_BASE is all lowercase
      - name: Lowercase IMAGE_NAME_BASE
        run: |
          echo "IMAGE_NAME_BASE=${IMAGE_NAME_BASE,,}" >>${GITHUB_ENV}

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da #v3.7.0
        with:
          cosign-release: 'v2.4.1'

      # Add support for building for other platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: "linux/amd64,linux/arm64"

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          use: "linux/amd64,linux/arm64"

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Setup environment
      - name: Setup environment
        run: |
          # Create required folders
          mkdir -p .bin .out

          # Print podman version
          podman version

      # Compile the tools app
      - name: Compile tools app
        run: |
          go build \
            -v \
            -o ../.bin/tools
        working-directory: ./tools

      # Build and push Docker image for tailscale
      # For linux/amd64 and linux/arm64
      - name: "Build and push Docker image: tailscale"
        id: build-and-push-tailscale
        run: |
          set -euo pipefail
          .bin/tools \
            ./el9/tailscale \
            --versions-file versions.yaml \
            --arch amd64,arm64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/centos9/" \
            --platform docker \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/tailscale.json
          echo "ImageName=$(jq -r '.imageName' .out/tailscale.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/tailscale.json)" >> "$GITHUB_OUTPUT"

      # Build and push Docker image for base
      # For linux/amd64 and linux/arm64
      - name: "Build and push Docker image: base"
        id: build-and-push-base
        run: |
          set -euo pipefail
          .bin/tools \
            ./el9/base \
            --versions-file versions.yaml \
            --arch amd64,arm64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/centos9/" \
            --platform docker \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/base.json
          echo "ImageName=$(jq -r '.imageName' .out/base.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/base.json)" >> "$GITHUB_OUTPUT"

      # Build and push Docker image for zfs
      # For linux/amd64
      - name: "Build and push Docker image: zfs"
        id: build-and-push-zfs
        run: |
          set -euo pipefail
          .bin/tools \
            ./el9/zfs \
            --versions-file versions.yaml \
            --arch amd64 \
            --repository "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/centos9/" \
            --platform docker \
            --push \
            --tag "$(date +"%Y%m%d")" \
              | tee .out/zfs.json
          echo "ImageName=$(jq -r '.imageName' .out/zfs.json)" >> "$GITHUB_OUTPUT"
          echo "Digest=$(jq -r '.digest' .out/zfs.json)" >> "$GITHUB_OUTPUT"

      - name: 'Container image attestation: tailscale'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-tailscale.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-tailscale.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: base'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-base.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-base.outputs.Digest }}
          push-to-registry: true

      - name: 'Container image attestation: zfs'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.build-and-push-zfs.outputs.ImageName }}
          subject-digest: ${{ steps.build-and-push-zfs.outputs.Digest }}
          push-to-registry: true
